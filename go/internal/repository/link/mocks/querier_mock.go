// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/mcdev12/lumo/go/internal/repository/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLinkQuerier creates a new instance of MockLinkQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLinkQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLinkQuerier {
	mock := &MockLinkQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLinkQuerier is an autogenerated mock type for the LinkQuerier type
type MockLinkQuerier struct {
	mock.Mock
}

type MockLinkQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLinkQuerier) EXPECT() *MockLinkQuerier_Expecter {
	return &MockLinkQuerier_Expecter{mock: &_m.Mock}
}

// CountLinksByFromLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) CountLinksByFromLumeID(ctx context.Context, fromLumeID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, fromLumeID)

	if len(ret) == 0 {
		panic("no return value specified for CountLinksByFromLumeID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, fromLumeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, fromLumeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, fromLumeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_CountLinksByFromLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLinksByFromLumeID'
type MockLinkQuerier_CountLinksByFromLumeID_Call struct {
	*mock.Call
}

// CountLinksByFromLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - fromLumeID uuid.UUID
func (_e *MockLinkQuerier_Expecter) CountLinksByFromLumeID(ctx interface{}, fromLumeID interface{}) *MockLinkQuerier_CountLinksByFromLumeID_Call {
	return &MockLinkQuerier_CountLinksByFromLumeID_Call{Call: _e.mock.On("CountLinksByFromLumeID", ctx, fromLumeID)}
}

func (_c *MockLinkQuerier_CountLinksByFromLumeID_Call) Run(run func(ctx context.Context, fromLumeID uuid.UUID)) *MockLinkQuerier_CountLinksByFromLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_CountLinksByFromLumeID_Call) Return(n int64, err error) *MockLinkQuerier_CountLinksByFromLumeID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLinkQuerier_CountLinksByFromLumeID_Call) RunAndReturn(run func(ctx context.Context, fromLumeID uuid.UUID) (int64, error)) *MockLinkQuerier_CountLinksByFromLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// CountLinksByLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) CountLinksByLumeID(ctx context.Context, fromLumeID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, fromLumeID)

	if len(ret) == 0 {
		panic("no return value specified for CountLinksByLumeID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, fromLumeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, fromLumeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, fromLumeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_CountLinksByLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLinksByLumeID'
type MockLinkQuerier_CountLinksByLumeID_Call struct {
	*mock.Call
}

// CountLinksByLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - fromLumeID uuid.UUID
func (_e *MockLinkQuerier_Expecter) CountLinksByLumeID(ctx interface{}, fromLumeID interface{}) *MockLinkQuerier_CountLinksByLumeID_Call {
	return &MockLinkQuerier_CountLinksByLumeID_Call{Call: _e.mock.On("CountLinksByLumeID", ctx, fromLumeID)}
}

func (_c *MockLinkQuerier_CountLinksByLumeID_Call) Run(run func(ctx context.Context, fromLumeID uuid.UUID)) *MockLinkQuerier_CountLinksByLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_CountLinksByLumeID_Call) Return(n int64, err error) *MockLinkQuerier_CountLinksByLumeID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLinkQuerier_CountLinksByLumeID_Call) RunAndReturn(run func(ctx context.Context, fromLumeID uuid.UUID) (int64, error)) *MockLinkQuerier_CountLinksByLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// CountLinksByToLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) CountLinksByToLumeID(ctx context.Context, toLumeID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, toLumeID)

	if len(ret) == 0 {
		panic("no return value specified for CountLinksByToLumeID")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, toLumeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, toLumeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, toLumeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_CountLinksByToLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLinksByToLumeID'
type MockLinkQuerier_CountLinksByToLumeID_Call struct {
	*mock.Call
}

// CountLinksByToLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - toLumeID uuid.UUID
func (_e *MockLinkQuerier_Expecter) CountLinksByToLumeID(ctx interface{}, toLumeID interface{}) *MockLinkQuerier_CountLinksByToLumeID_Call {
	return &MockLinkQuerier_CountLinksByToLumeID_Call{Call: _e.mock.On("CountLinksByToLumeID", ctx, toLumeID)}
}

func (_c *MockLinkQuerier_CountLinksByToLumeID_Call) Run(run func(ctx context.Context, toLumeID uuid.UUID)) *MockLinkQuerier_CountLinksByToLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_CountLinksByToLumeID_Call) Return(n int64, err error) *MockLinkQuerier_CountLinksByToLumeID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLinkQuerier_CountLinksByToLumeID_Call) RunAndReturn(run func(ctx context.Context, toLumeID uuid.UUID) (int64, error)) *MockLinkQuerier_CountLinksByToLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLink provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) CreateLink(ctx context.Context, arg sqlc.CreateLinkParams) (sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLink")
	}

	var r0 sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateLinkParams) (sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateLinkParams) sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.CreateLinkParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_CreateLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLink'
type MockLinkQuerier_CreateLink_Call struct {
	*mock.Call
}

// CreateLink is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.CreateLinkParams
func (_e *MockLinkQuerier_Expecter) CreateLink(ctx interface{}, arg interface{}) *MockLinkQuerier_CreateLink_Call {
	return &MockLinkQuerier_CreateLink_Call{Call: _e.mock.On("CreateLink", ctx, arg)}
}

func (_c *MockLinkQuerier_CreateLink_Call) Run(run func(ctx context.Context, arg sqlc.CreateLinkParams)) *MockLinkQuerier_CreateLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.CreateLinkParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.CreateLinkParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_CreateLink_Call) Return(link sqlc.Link, err error) *MockLinkQuerier_CreateLink_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockLinkQuerier_CreateLink_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.CreateLinkParams) (sqlc.Link, error)) *MockLinkQuerier_CreateLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLink provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) DeleteLink(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinkQuerier_DeleteLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLink'
type MockLinkQuerier_DeleteLink_Call struct {
	*mock.Call
}

// DeleteLink is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLinkQuerier_Expecter) DeleteLink(ctx interface{}, id interface{}) *MockLinkQuerier_DeleteLink_Call {
	return &MockLinkQuerier_DeleteLink_Call{Call: _e.mock.On("DeleteLink", ctx, id)}
}

func (_c *MockLinkQuerier_DeleteLink_Call) Run(run func(ctx context.Context, id int64)) *MockLinkQuerier_DeleteLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_DeleteLink_Call) Return(err error) *MockLinkQuerier_DeleteLink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinkQuerier_DeleteLink_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockLinkQuerier_DeleteLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLinkByLinkID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) DeleteLinkByLinkID(ctx context.Context, linkID uuid.UUID) error {
	ret := _mock.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLinkByLinkID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, linkID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLinkQuerier_DeleteLinkByLinkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLinkByLinkID'
type MockLinkQuerier_DeleteLinkByLinkID_Call struct {
	*mock.Call
}

// DeleteLinkByLinkID is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID uuid.UUID
func (_e *MockLinkQuerier_Expecter) DeleteLinkByLinkID(ctx interface{}, linkID interface{}) *MockLinkQuerier_DeleteLinkByLinkID_Call {
	return &MockLinkQuerier_DeleteLinkByLinkID_Call{Call: _e.mock.On("DeleteLinkByLinkID", ctx, linkID)}
}

func (_c *MockLinkQuerier_DeleteLinkByLinkID_Call) Run(run func(ctx context.Context, linkID uuid.UUID)) *MockLinkQuerier_DeleteLinkByLinkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_DeleteLinkByLinkID_Call) Return(err error) *MockLinkQuerier_DeleteLinkByLinkID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLinkQuerier_DeleteLinkByLinkID_Call) RunAndReturn(run func(ctx context.Context, linkID uuid.UUID) error) *MockLinkQuerier_DeleteLinkByLinkID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkByID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) GetLinkByID(ctx context.Context, id int64) (sqlc.Link, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkByID")
	}

	var r0 sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Link, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) sqlc.Link); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_GetLinkByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkByID'
type MockLinkQuerier_GetLinkByID_Call struct {
	*mock.Call
}

// GetLinkByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLinkQuerier_Expecter) GetLinkByID(ctx interface{}, id interface{}) *MockLinkQuerier_GetLinkByID_Call {
	return &MockLinkQuerier_GetLinkByID_Call{Call: _e.mock.On("GetLinkByID", ctx, id)}
}

func (_c *MockLinkQuerier_GetLinkByID_Call) Run(run func(ctx context.Context, id int64)) *MockLinkQuerier_GetLinkByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_GetLinkByID_Call) Return(link sqlc.Link, err error) *MockLinkQuerier_GetLinkByID_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockLinkQuerier_GetLinkByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (sqlc.Link, error)) *MockLinkQuerier_GetLinkByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinkByLinkID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) GetLinkByLinkID(ctx context.Context, linkID uuid.UUID) (sqlc.Link, error) {
	ret := _mock.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkByLinkID")
	}

	var r0 sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (sqlc.Link, error)); ok {
		return returnFunc(ctx, linkID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) sqlc.Link); ok {
		r0 = returnFunc(ctx, linkID)
	} else {
		r0 = ret.Get(0).(sqlc.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, linkID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_GetLinkByLinkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinkByLinkID'
type MockLinkQuerier_GetLinkByLinkID_Call struct {
	*mock.Call
}

// GetLinkByLinkID is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID uuid.UUID
func (_e *MockLinkQuerier_Expecter) GetLinkByLinkID(ctx interface{}, linkID interface{}) *MockLinkQuerier_GetLinkByLinkID_Call {
	return &MockLinkQuerier_GetLinkByLinkID_Call{Call: _e.mock.On("GetLinkByLinkID", ctx, linkID)}
}

func (_c *MockLinkQuerier_GetLinkByLinkID_Call) Run(run func(ctx context.Context, linkID uuid.UUID)) *MockLinkQuerier_GetLinkByLinkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_GetLinkByLinkID_Call) Return(link sqlc.Link, err error) *MockLinkQuerier_GetLinkByLinkID_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockLinkQuerier_GetLinkByLinkID_Call) RunAndReturn(run func(ctx context.Context, linkID uuid.UUID) (sqlc.Link, error)) *MockLinkQuerier_GetLinkByLinkID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByEitherLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) ListLinksByEitherLumeID(ctx context.Context, arg sqlc.ListLinksByEitherLumeIDParams) ([]sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByEitherLumeID")
	}

	var r0 []sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByEitherLumeIDParams) ([]sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByEitherLumeIDParams) []sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLinksByEitherLumeIDParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_ListLinksByEitherLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByEitherLumeID'
type MockLinkQuerier_ListLinksByEitherLumeID_Call struct {
	*mock.Call
}

// ListLinksByEitherLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLinksByEitherLumeIDParams
func (_e *MockLinkQuerier_Expecter) ListLinksByEitherLumeID(ctx interface{}, arg interface{}) *MockLinkQuerier_ListLinksByEitherLumeID_Call {
	return &MockLinkQuerier_ListLinksByEitherLumeID_Call{Call: _e.mock.On("ListLinksByEitherLumeID", ctx, arg)}
}

func (_c *MockLinkQuerier_ListLinksByEitherLumeID_Call) Run(run func(ctx context.Context, arg sqlc.ListLinksByEitherLumeIDParams)) *MockLinkQuerier_ListLinksByEitherLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLinksByEitherLumeIDParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLinksByEitherLumeIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_ListLinksByEitherLumeID_Call) Return(links []sqlc.Link, err error) *MockLinkQuerier_ListLinksByEitherLumeID_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinkQuerier_ListLinksByEitherLumeID_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLinksByEitherLumeIDParams) ([]sqlc.Link, error)) *MockLinkQuerier_ListLinksByEitherLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByFromLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) ListLinksByFromLumeID(ctx context.Context, arg sqlc.ListLinksByFromLumeIDParams) ([]sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByFromLumeID")
	}

	var r0 []sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByFromLumeIDParams) ([]sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByFromLumeIDParams) []sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLinksByFromLumeIDParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_ListLinksByFromLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByFromLumeID'
type MockLinkQuerier_ListLinksByFromLumeID_Call struct {
	*mock.Call
}

// ListLinksByFromLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLinksByFromLumeIDParams
func (_e *MockLinkQuerier_Expecter) ListLinksByFromLumeID(ctx interface{}, arg interface{}) *MockLinkQuerier_ListLinksByFromLumeID_Call {
	return &MockLinkQuerier_ListLinksByFromLumeID_Call{Call: _e.mock.On("ListLinksByFromLumeID", ctx, arg)}
}

func (_c *MockLinkQuerier_ListLinksByFromLumeID_Call) Run(run func(ctx context.Context, arg sqlc.ListLinksByFromLumeIDParams)) *MockLinkQuerier_ListLinksByFromLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLinksByFromLumeIDParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLinksByFromLumeIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_ListLinksByFromLumeID_Call) Return(links []sqlc.Link, err error) *MockLinkQuerier_ListLinksByFromLumeID_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinkQuerier_ListLinksByFromLumeID_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLinksByFromLumeIDParams) ([]sqlc.Link, error)) *MockLinkQuerier_ListLinksByFromLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByLumeIDAndType provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) ListLinksByLumeIDAndType(ctx context.Context, arg sqlc.ListLinksByLumeIDAndTypeParams) ([]sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByLumeIDAndType")
	}

	var r0 []sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByLumeIDAndTypeParams) ([]sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByLumeIDAndTypeParams) []sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLinksByLumeIDAndTypeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_ListLinksByLumeIDAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByLumeIDAndType'
type MockLinkQuerier_ListLinksByLumeIDAndType_Call struct {
	*mock.Call
}

// ListLinksByLumeIDAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLinksByLumeIDAndTypeParams
func (_e *MockLinkQuerier_Expecter) ListLinksByLumeIDAndType(ctx interface{}, arg interface{}) *MockLinkQuerier_ListLinksByLumeIDAndType_Call {
	return &MockLinkQuerier_ListLinksByLumeIDAndType_Call{Call: _e.mock.On("ListLinksByLumeIDAndType", ctx, arg)}
}

func (_c *MockLinkQuerier_ListLinksByLumeIDAndType_Call) Run(run func(ctx context.Context, arg sqlc.ListLinksByLumeIDAndTypeParams)) *MockLinkQuerier_ListLinksByLumeIDAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLinksByLumeIDAndTypeParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLinksByLumeIDAndTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_ListLinksByLumeIDAndType_Call) Return(links []sqlc.Link, err error) *MockLinkQuerier_ListLinksByLumeIDAndType_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinkQuerier_ListLinksByLumeIDAndType_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLinksByLumeIDAndTypeParams) ([]sqlc.Link, error)) *MockLinkQuerier_ListLinksByLumeIDAndType_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByToLumeID provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) ListLinksByToLumeID(ctx context.Context, arg sqlc.ListLinksByToLumeIDParams) ([]sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByToLumeID")
	}

	var r0 []sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByToLumeIDParams) ([]sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByToLumeIDParams) []sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLinksByToLumeIDParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_ListLinksByToLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByToLumeID'
type MockLinkQuerier_ListLinksByToLumeID_Call struct {
	*mock.Call
}

// ListLinksByToLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLinksByToLumeIDParams
func (_e *MockLinkQuerier_Expecter) ListLinksByToLumeID(ctx interface{}, arg interface{}) *MockLinkQuerier_ListLinksByToLumeID_Call {
	return &MockLinkQuerier_ListLinksByToLumeID_Call{Call: _e.mock.On("ListLinksByToLumeID", ctx, arg)}
}

func (_c *MockLinkQuerier_ListLinksByToLumeID_Call) Run(run func(ctx context.Context, arg sqlc.ListLinksByToLumeIDParams)) *MockLinkQuerier_ListLinksByToLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLinksByToLumeIDParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLinksByToLumeIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_ListLinksByToLumeID_Call) Return(links []sqlc.Link, err error) *MockLinkQuerier_ListLinksByToLumeID_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinkQuerier_ListLinksByToLumeID_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLinksByToLumeIDParams) ([]sqlc.Link, error)) *MockLinkQuerier_ListLinksByToLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLinksByType provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) ListLinksByType(ctx context.Context, arg sqlc.ListLinksByTypeParams) ([]sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLinksByType")
	}

	var r0 []sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByTypeParams) ([]sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLinksByTypeParams) []sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Link)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLinksByTypeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_ListLinksByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLinksByType'
type MockLinkQuerier_ListLinksByType_Call struct {
	*mock.Call
}

// ListLinksByType is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLinksByTypeParams
func (_e *MockLinkQuerier_Expecter) ListLinksByType(ctx interface{}, arg interface{}) *MockLinkQuerier_ListLinksByType_Call {
	return &MockLinkQuerier_ListLinksByType_Call{Call: _e.mock.On("ListLinksByType", ctx, arg)}
}

func (_c *MockLinkQuerier_ListLinksByType_Call) Run(run func(ctx context.Context, arg sqlc.ListLinksByTypeParams)) *MockLinkQuerier_ListLinksByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLinksByTypeParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLinksByTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_ListLinksByType_Call) Return(links []sqlc.Link, err error) *MockLinkQuerier_ListLinksByType_Call {
	_c.Call.Return(links, err)
	return _c
}

func (_c *MockLinkQuerier_ListLinksByType_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLinksByTypeParams) ([]sqlc.Link, error)) *MockLinkQuerier_ListLinksByType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLink provides a mock function for the type MockLinkQuerier
func (_mock *MockLinkQuerier) UpdateLink(ctx context.Context, arg sqlc.UpdateLinkParams) (sqlc.Link, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLink")
	}

	var r0 sqlc.Link
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateLinkParams) (sqlc.Link, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateLinkParams) sqlc.Link); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Link)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.UpdateLinkParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLinkQuerier_UpdateLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLink'
type MockLinkQuerier_UpdateLink_Call struct {
	*mock.Call
}

// UpdateLink is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.UpdateLinkParams
func (_e *MockLinkQuerier_Expecter) UpdateLink(ctx interface{}, arg interface{}) *MockLinkQuerier_UpdateLink_Call {
	return &MockLinkQuerier_UpdateLink_Call{Call: _e.mock.On("UpdateLink", ctx, arg)}
}

func (_c *MockLinkQuerier_UpdateLink_Call) Run(run func(ctx context.Context, arg sqlc.UpdateLinkParams)) *MockLinkQuerier_UpdateLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.UpdateLinkParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.UpdateLinkParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLinkQuerier_UpdateLink_Call) Return(link sqlc.Link, err error) *MockLinkQuerier_UpdateLink_Call {
	_c.Call.Return(link, err)
	return _c
}

func (_c *MockLinkQuerier_UpdateLink_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.UpdateLinkParams) (sqlc.Link, error)) *MockLinkQuerier_UpdateLink_Call {
	_c.Call.Return(run)
	return _c
}

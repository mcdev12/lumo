// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lumo_queries.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countLumosByUserID = `-- name: CountLumosByUserID :one
SELECT COUNT(*) FROM lumo WHERE user_id = $1
`

func (q *Queries) CountLumosByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLumosByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLumo = `-- name: CreateLumo :one
INSERT INTO lumo (
    lumo_id, user_id, title, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, lumo_id, user_id, title, created_at, updated_at
`

type CreateLumoParams struct {
	LumoID    uuid.UUID `json:"lumo_id"`
	UserID    uuid.UUID `json:"user_id"`
	Title     string    `json:"title"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateLumo(ctx context.Context, arg CreateLumoParams) (Lumo, error) {
	row := q.db.QueryRowContext(ctx, createLumo,
		arg.LumoID,
		arg.UserID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Lumo
	err := row.Scan(
		&i.ID,
		&i.LumoID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLumo = `-- name: DeleteLumo :exec
DELETE FROM lumo WHERE id = $1
`

func (q *Queries) DeleteLumo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLumo, id)
	return err
}

const deleteLumoByLumoID = `-- name: DeleteLumoByLumoID :exec
DELETE FROM lumo WHERE lumo_id = $1
`

func (q *Queries) DeleteLumoByLumoID(ctx context.Context, lumoID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLumoByLumoID, lumoID)
	return err
}

const getLumoByID = `-- name: GetLumoByID :one
SELECT id, lumo_id, user_id, title, created_at, updated_at
FROM lumo WHERE id = $1
`

func (q *Queries) GetLumoByID(ctx context.Context, id int64) (Lumo, error) {
	row := q.db.QueryRowContext(ctx, getLumoByID, id)
	var i Lumo
	err := row.Scan(
		&i.ID,
		&i.LumoID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLumoByLumoID = `-- name: GetLumoByLumoID :one
SELECT id, lumo_id, user_id, title, created_at, updated_at
FROM lumo WHERE lumo_id = $1
`

func (q *Queries) GetLumoByLumoID(ctx context.Context, lumoID uuid.UUID) (Lumo, error) {
	row := q.db.QueryRowContext(ctx, getLumoByLumoID, lumoID)
	var i Lumo
	err := row.Scan(
		&i.ID,
		&i.LumoID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLumosByUserID = `-- name: ListLumosByUserID :many
SELECT id, lumo_id, user_id, title, created_at, updated_at
FROM lumo 
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLumosByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListLumosByUserID(ctx context.Context, arg ListLumosByUserIDParams) ([]Lumo, error) {
	rows, err := q.db.QueryContext(ctx, listLumosByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lumo
	for rows.Next() {
		var i Lumo
		if err := rows.Scan(
			&i.ID,
			&i.LumoID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLumo = `-- name: UpdateLumo :one
UPDATE lumo SET
    title = $2,
    updated_at = $3
WHERE lumo_id = $1
RETURNING id, lumo_id, user_id, title, created_at, updated_at
`

type UpdateLumoParams struct {
	LumoID    uuid.UUID `json:"lumo_id"`
	Title     string    `json:"title"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateLumo(ctx context.Context, arg UpdateLumoParams) (Lumo, error) {
	row := q.db.QueryRowContext(ctx, updateLumo, arg.LumoID, arg.Title, arg.UpdatedAt)
	var i Lumo
	err := row.Scan(
		&i.ID,
		&i.LumoID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

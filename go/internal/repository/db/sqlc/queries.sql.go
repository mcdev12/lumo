// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createLume = `-- name: CreateLume :one
INSERT INTO lume (lume_id, lumo_id, label, type, description, metadata, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)  -- $1 = lume_id (provided by Go!)
RETURNING id, lume_id, lumo_id, label, type, description, metadata, created_at, updated_at
`

type CreateLumeParams struct {
	LumeID      uuid.UUID             `json:"lume_id"`
	LumoID      uuid.UUID             `json:"lumo_id"`
	Label       string                `json:"label"`
	Type        string                `json:"type"`
	Description sql.NullString        `json:"description"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
	CreatedAt   time.Time             `json:"created_at"`
	UpdatedAt   time.Time             `json:"updated_at"`
}

func (q *Queries) CreateLume(ctx context.Context, arg CreateLumeParams) (Lume, error) {
	row := q.db.QueryRowContext(ctx, createLume,
		arg.LumeID,
		arg.LumoID,
		arg.Label,
		arg.Type,
		arg.Description,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Lume
	err := row.Scan(
		&i.ID,
		&i.LumeID,
		&i.LumoID,
		&i.Label,
		&i.Type,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLume = `-- name: DeleteLume :exec
DELETE FROM lume WHERE id = $1
`

func (q *Queries) DeleteLume(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLume, id)
	return err
}

const getLumeByID = `-- name: GetLumeByID :one
SELECT id, lume_id, lumo_id, label, type, description, metadata, created_at, updated_at
FROM lume WHERE id = $1
`

func (q *Queries) GetLumeByID(ctx context.Context, id int64) (Lume, error) {
	row := q.db.QueryRowContext(ctx, getLumeByID, id)
	var i Lume
	err := row.Scan(
		&i.ID,
		&i.LumeID,
		&i.LumoID,
		&i.Label,
		&i.Type,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLumeByLumeID = `-- name: GetLumeByLumeID :one
SELECT id, lume_id, lumo_id, label, type, description, metadata, created_at, updated_at
FROM lume WHERE lume_id = $1
`

func (q *Queries) GetLumeByLumeID(ctx context.Context, lumeID uuid.UUID) (Lume, error) {
	row := q.db.QueryRowContext(ctx, getLumeByLumeID, lumeID)
	var i Lume
	err := row.Scan(
		&i.ID,
		&i.LumeID,
		&i.LumoID,
		&i.Label,
		&i.Type,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLumesByLumoID = `-- name: ListLumesByLumoID :many
SELECT id, lume_id, lumo_id, label, type, description, metadata, created_at, updated_at
FROM lume 
WHERE lumo_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListLumesByLumoIDParams struct {
	LumoID uuid.UUID `json:"lumo_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListLumesByLumoID(ctx context.Context, arg ListLumesByLumoIDParams) ([]Lume, error) {
	rows, err := q.db.QueryContext(ctx, listLumesByLumoID, arg.LumoID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lume
	for rows.Next() {
		var i Lume
		if err := rows.Scan(
			&i.ID,
			&i.LumeID,
			&i.LumoID,
			&i.Label,
			&i.Type,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLume = `-- name: UpdateLume :one
UPDATE lume 
SET label = $2, type = $3, description = $4, metadata = $5, updated_at = $6
WHERE id = $1
RETURNING id, lume_id, lumo_id, label, type, description, metadata, created_at, updated_at
`

type UpdateLumeParams struct {
	ID          int64                 `json:"id"`
	Label       string                `json:"label"`
	Type        string                `json:"type"`
	Description sql.NullString        `json:"description"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
	UpdatedAt   time.Time             `json:"updated_at"`
}

func (q *Queries) UpdateLume(ctx context.Context, arg UpdateLumeParams) (Lume, error) {
	row := q.db.QueryRowContext(ctx, updateLume,
		arg.ID,
		arg.Label,
		arg.Type,
		arg.Description,
		arg.Metadata,
		arg.UpdatedAt,
	)
	var i Lume
	err := row.Scan(
		&i.ID,
		&i.LumeID,
		&i.LumoID,
		&i.Label,
		&i.Type,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

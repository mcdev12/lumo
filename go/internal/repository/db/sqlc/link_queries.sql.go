// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link_queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const countLinksByFromLumeID = `-- name: CountLinksByFromLumeID :one
SELECT COUNT(*) FROM link WHERE from_lume_id = $1
`

func (q *Queries) CountLinksByFromLumeID(ctx context.Context, fromLumeID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinksByFromLumeID, fromLumeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countLinksByLumeID = `-- name: CountLinksByLumeID :one
SELECT COUNT(*) FROM link WHERE from_lume_id = $1 OR to_lume_id = $1
`

func (q *Queries) CountLinksByLumeID(ctx context.Context, fromLumeID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinksByLumeID, fromLumeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countLinksByToLumeID = `-- name: CountLinksByToLumeID :one
SELECT COUNT(*) FROM link WHERE to_lume_id = $1
`

func (q *Queries) CountLinksByToLumeID(ctx context.Context, toLumeID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinksByToLumeID, toLumeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLink = `-- name: CreateLink :one
INSERT INTO link (
    link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
`

type CreateLinkParams struct {
	LinkID        uuid.UUID             `json:"link_id"`
	FromLumeID    uuid.UUID             `json:"from_lume_id"`
	ToLumeID      uuid.UUID             `json:"to_lume_id"`
	LinkType      string                `json:"link_type"`
	TravelDetails pqtype.NullRawMessage `json:"travel_details"`
	Notes         sql.NullString        `json:"notes"`
	SequenceIndex sql.NullInt32         `json:"sequence_index"`
	CreatedAt     time.Time             `json:"created_at"`
	UpdatedAt     time.Time             `json:"updated_at"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.LinkID,
		arg.FromLumeID,
		arg.ToLumeID,
		arg.LinkType,
		arg.TravelDetails,
		arg.Notes,
		arg.SequenceIndex,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.FromLumeID,
		&i.ToLumeID,
		&i.LinkType,
		&i.TravelDetails,
		&i.Notes,
		&i.SequenceIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM link WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const deleteLinkByLinkID = `-- name: DeleteLinkByLinkID :exec
DELETE FROM link WHERE link_id = $1
`

func (q *Queries) DeleteLinkByLinkID(ctx context.Context, linkID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLinkByLinkID, linkID)
	return err
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link WHERE id = $1
`

func (q *Queries) GetLinkByID(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByID, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.FromLumeID,
		&i.ToLumeID,
		&i.LinkType,
		&i.TravelDetails,
		&i.Notes,
		&i.SequenceIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLinkByLinkID = `-- name: GetLinkByLinkID :one
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link WHERE link_id = $1
`

func (q *Queries) GetLinkByLinkID(ctx context.Context, linkID uuid.UUID) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByLinkID, linkID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.FromLumeID,
		&i.ToLumeID,
		&i.LinkType,
		&i.TravelDetails,
		&i.Notes,
		&i.SequenceIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLinksByEitherLumeID = `-- name: ListLinksByEitherLumeID :many
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link 
WHERE from_lume_id = $1 OR to_lume_id = $1
ORDER BY sequence_index ASC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByEitherLumeIDParams struct {
	FromLumeID uuid.UUID `json:"from_lume_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) ListLinksByEitherLumeID(ctx context.Context, arg ListLinksByEitherLumeIDParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinksByEitherLumeID, arg.FromLumeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.LinkID,
			&i.FromLumeID,
			&i.ToLumeID,
			&i.LinkType,
			&i.TravelDetails,
			&i.Notes,
			&i.SequenceIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksByFromLumeID = `-- name: ListLinksByFromLumeID :many
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link 
WHERE from_lume_id = $1
ORDER BY sequence_index ASC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByFromLumeIDParams struct {
	FromLumeID uuid.UUID `json:"from_lume_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) ListLinksByFromLumeID(ctx context.Context, arg ListLinksByFromLumeIDParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinksByFromLumeID, arg.FromLumeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.LinkID,
			&i.FromLumeID,
			&i.ToLumeID,
			&i.LinkType,
			&i.TravelDetails,
			&i.Notes,
			&i.SequenceIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksByLumeIDAndType = `-- name: ListLinksByLumeIDAndType :many
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link 
WHERE (from_lume_id = $1 OR to_lume_id = $1) AND link_type = $2
ORDER BY sequence_index ASC NULLS LAST, created_at DESC
LIMIT $3 OFFSET $4
`

type ListLinksByLumeIDAndTypeParams struct {
	FromLumeID uuid.UUID `json:"from_lume_id"`
	LinkType   string    `json:"link_type"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) ListLinksByLumeIDAndType(ctx context.Context, arg ListLinksByLumeIDAndTypeParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinksByLumeIDAndType,
		arg.FromLumeID,
		arg.LinkType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.LinkID,
			&i.FromLumeID,
			&i.ToLumeID,
			&i.LinkType,
			&i.TravelDetails,
			&i.Notes,
			&i.SequenceIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksByToLumeID = `-- name: ListLinksByToLumeID :many
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link 
WHERE to_lume_id = $1
ORDER BY sequence_index ASC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByToLumeIDParams struct {
	ToLumeID uuid.UUID `json:"to_lume_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) ListLinksByToLumeID(ctx context.Context, arg ListLinksByToLumeIDParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinksByToLumeID, arg.ToLumeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.LinkID,
			&i.FromLumeID,
			&i.ToLumeID,
			&i.LinkType,
			&i.TravelDetails,
			&i.Notes,
			&i.SequenceIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksByType = `-- name: ListLinksByType :many
SELECT id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
FROM link 
WHERE link_type = $1
ORDER BY sequence_index ASC NULLS LAST, created_at DESC
LIMIT $2 OFFSET $3
`

type ListLinksByTypeParams struct {
	LinkType string `json:"link_type"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListLinksByType(ctx context.Context, arg ListLinksByTypeParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinksByType, arg.LinkType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.LinkID,
			&i.FromLumeID,
			&i.ToLumeID,
			&i.LinkType,
			&i.TravelDetails,
			&i.Notes,
			&i.SequenceIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE link SET
    from_lume_id = $2,
    to_lume_id = $3,
    link_type = $4,
    travel_details = $5,
    notes = $6,
    sequence_index = $7,
    updated_at = $8
WHERE link_id = $1
RETURNING id, link_id, from_lume_id, to_lume_id, link_type,
    travel_details, notes, sequence_index, created_at, updated_at
`

type UpdateLinkParams struct {
	LinkID        uuid.UUID             `json:"link_id"`
	FromLumeID    uuid.UUID             `json:"from_lume_id"`
	ToLumeID      uuid.UUID             `json:"to_lume_id"`
	LinkType      string                `json:"link_type"`
	TravelDetails pqtype.NullRawMessage `json:"travel_details"`
	Notes         sql.NullString        `json:"notes"`
	SequenceIndex sql.NullInt32         `json:"sequence_index"`
	UpdatedAt     time.Time             `json:"updated_at"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLink,
		arg.LinkID,
		arg.FromLumeID,
		arg.ToLumeID,
		arg.LinkType,
		arg.TravelDetails,
		arg.Notes,
		arg.SequenceIndex,
		arg.UpdatedAt,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.FromLumeID,
		&i.ToLumeID,
		&i.LinkType,
		&i.TravelDetails,
		&i.Notes,
		&i.SequenceIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/mcdev12/lumo/go/internal/repository/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLumeQuerier creates a new instance of MockLumeQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLumeQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLumeQuerier {
	mock := &MockLumeQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLumeQuerier is an autogenerated mock type for the LumeQuerier type
type MockLumeQuerier struct {
	mock.Mock
}

type MockLumeQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLumeQuerier) EXPECT() *MockLumeQuerier_Expecter {
	return &MockLumeQuerier_Expecter{mock: &_m.Mock}
}

// CountLumesByLumo provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) CountLumesByLumo(ctx context.Context, lumoID uuid.UUID) (int64, error) {
	ret := _mock.Called(ctx, lumoID)

	if len(ret) == 0 {
		panic("no return value specified for CountLumesByLumo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return returnFunc(ctx, lumoID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = returnFunc(ctx, lumoID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, lumoID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_CountLumesByLumo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLumesByLumo'
type MockLumeQuerier_CountLumesByLumo_Call struct {
	*mock.Call
}

// CountLumesByLumo is a helper method to define mock.On call
//   - ctx context.Context
//   - lumoID uuid.UUID
func (_e *MockLumeQuerier_Expecter) CountLumesByLumo(ctx interface{}, lumoID interface{}) *MockLumeQuerier_CountLumesByLumo_Call {
	return &MockLumeQuerier_CountLumesByLumo_Call{Call: _e.mock.On("CountLumesByLumo", ctx, lumoID)}
}

func (_c *MockLumeQuerier_CountLumesByLumo_Call) Run(run func(ctx context.Context, lumoID uuid.UUID)) *MockLumeQuerier_CountLumesByLumo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_CountLumesByLumo_Call) Return(n int64, err error) *MockLumeQuerier_CountLumesByLumo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockLumeQuerier_CountLumesByLumo_Call) RunAndReturn(run func(ctx context.Context, lumoID uuid.UUID) (int64, error)) *MockLumeQuerier_CountLumesByLumo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLume provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) CreateLume(ctx context.Context, arg sqlc.CreateLumeParams) (sqlc.Lume, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLume")
	}

	var r0 sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateLumeParams) (sqlc.Lume, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateLumeParams) sqlc.Lume); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Lume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.CreateLumeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_CreateLume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLume'
type MockLumeQuerier_CreateLume_Call struct {
	*mock.Call
}

// CreateLume is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.CreateLumeParams
func (_e *MockLumeQuerier_Expecter) CreateLume(ctx interface{}, arg interface{}) *MockLumeQuerier_CreateLume_Call {
	return &MockLumeQuerier_CreateLume_Call{Call: _e.mock.On("CreateLume", ctx, arg)}
}

func (_c *MockLumeQuerier_CreateLume_Call) Run(run func(ctx context.Context, arg sqlc.CreateLumeParams)) *MockLumeQuerier_CreateLume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.CreateLumeParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.CreateLumeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_CreateLume_Call) Return(lume sqlc.Lume, err error) *MockLumeQuerier_CreateLume_Call {
	_c.Call.Return(lume, err)
	return _c
}

func (_c *MockLumeQuerier_CreateLume_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.CreateLumeParams) (sqlc.Lume, error)) *MockLumeQuerier_CreateLume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLume provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) DeleteLume(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLume")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLumeQuerier_DeleteLume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLume'
type MockLumeQuerier_DeleteLume_Call struct {
	*mock.Call
}

// DeleteLume is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLumeQuerier_Expecter) DeleteLume(ctx interface{}, id interface{}) *MockLumeQuerier_DeleteLume_Call {
	return &MockLumeQuerier_DeleteLume_Call{Call: _e.mock.On("DeleteLume", ctx, id)}
}

func (_c *MockLumeQuerier_DeleteLume_Call) Run(run func(ctx context.Context, id int64)) *MockLumeQuerier_DeleteLume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_DeleteLume_Call) Return(err error) *MockLumeQuerier_DeleteLume_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLumeQuerier_DeleteLume_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockLumeQuerier_DeleteLume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLumeByLumeID provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) DeleteLumeByLumeID(ctx context.Context, lumeID uuid.UUID) error {
	ret := _mock.Called(ctx, lumeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLumeByLumeID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, lumeID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLumeQuerier_DeleteLumeByLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLumeByLumeID'
type MockLumeQuerier_DeleteLumeByLumeID_Call struct {
	*mock.Call
}

// DeleteLumeByLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - lumeID uuid.UUID
func (_e *MockLumeQuerier_Expecter) DeleteLumeByLumeID(ctx interface{}, lumeID interface{}) *MockLumeQuerier_DeleteLumeByLumeID_Call {
	return &MockLumeQuerier_DeleteLumeByLumeID_Call{Call: _e.mock.On("DeleteLumeByLumeID", ctx, lumeID)}
}

func (_c *MockLumeQuerier_DeleteLumeByLumeID_Call) Run(run func(ctx context.Context, lumeID uuid.UUID)) *MockLumeQuerier_DeleteLumeByLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_DeleteLumeByLumeID_Call) Return(err error) *MockLumeQuerier_DeleteLumeByLumeID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLumeQuerier_DeleteLumeByLumeID_Call) RunAndReturn(run func(ctx context.Context, lumeID uuid.UUID) error) *MockLumeQuerier_DeleteLumeByLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLumeByID provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) GetLumeByID(ctx context.Context, id int64) (sqlc.Lume, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLumeByID")
	}

	var r0 sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (sqlc.Lume, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) sqlc.Lume); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(sqlc.Lume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_GetLumeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLumeByID'
type MockLumeQuerier_GetLumeByID_Call struct {
	*mock.Call
}

// GetLumeByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLumeQuerier_Expecter) GetLumeByID(ctx interface{}, id interface{}) *MockLumeQuerier_GetLumeByID_Call {
	return &MockLumeQuerier_GetLumeByID_Call{Call: _e.mock.On("GetLumeByID", ctx, id)}
}

func (_c *MockLumeQuerier_GetLumeByID_Call) Run(run func(ctx context.Context, id int64)) *MockLumeQuerier_GetLumeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_GetLumeByID_Call) Return(lume sqlc.Lume, err error) *MockLumeQuerier_GetLumeByID_Call {
	_c.Call.Return(lume, err)
	return _c
}

func (_c *MockLumeQuerier_GetLumeByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (sqlc.Lume, error)) *MockLumeQuerier_GetLumeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLumeByLumeID provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) GetLumeByLumeID(ctx context.Context, lumeID uuid.UUID) (sqlc.Lume, error) {
	ret := _mock.Called(ctx, lumeID)

	if len(ret) == 0 {
		panic("no return value specified for GetLumeByLumeID")
	}

	var r0 sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (sqlc.Lume, error)); ok {
		return returnFunc(ctx, lumeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) sqlc.Lume); ok {
		r0 = returnFunc(ctx, lumeID)
	} else {
		r0 = ret.Get(0).(sqlc.Lume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, lumeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_GetLumeByLumeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLumeByLumeID'
type MockLumeQuerier_GetLumeByLumeID_Call struct {
	*mock.Call
}

// GetLumeByLumeID is a helper method to define mock.On call
//   - ctx context.Context
//   - lumeID uuid.UUID
func (_e *MockLumeQuerier_Expecter) GetLumeByLumeID(ctx interface{}, lumeID interface{}) *MockLumeQuerier_GetLumeByLumeID_Call {
	return &MockLumeQuerier_GetLumeByLumeID_Call{Call: _e.mock.On("GetLumeByLumeID", ctx, lumeID)}
}

func (_c *MockLumeQuerier_GetLumeByLumeID_Call) Run(run func(ctx context.Context, lumeID uuid.UUID)) *MockLumeQuerier_GetLumeByLumeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_GetLumeByLumeID_Call) Return(lume sqlc.Lume, err error) *MockLumeQuerier_GetLumeByLumeID_Call {
	_c.Call.Return(lume, err)
	return _c
}

func (_c *MockLumeQuerier_GetLumeByLumeID_Call) RunAndReturn(run func(ctx context.Context, lumeID uuid.UUID) (sqlc.Lume, error)) *MockLumeQuerier_GetLumeByLumeID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLumesByLumoID provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) ListLumesByLumoID(ctx context.Context, arg sqlc.ListLumesByLumoIDParams) ([]sqlc.Lume, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLumesByLumoID")
	}

	var r0 []sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLumesByLumoIDParams) ([]sqlc.Lume, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLumesByLumoIDParams) []sqlc.Lume); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Lume)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLumesByLumoIDParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_ListLumesByLumoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLumesByLumoID'
type MockLumeQuerier_ListLumesByLumoID_Call struct {
	*mock.Call
}

// ListLumesByLumoID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLumesByLumoIDParams
func (_e *MockLumeQuerier_Expecter) ListLumesByLumoID(ctx interface{}, arg interface{}) *MockLumeQuerier_ListLumesByLumoID_Call {
	return &MockLumeQuerier_ListLumesByLumoID_Call{Call: _e.mock.On("ListLumesByLumoID", ctx, arg)}
}

func (_c *MockLumeQuerier_ListLumesByLumoID_Call) Run(run func(ctx context.Context, arg sqlc.ListLumesByLumoIDParams)) *MockLumeQuerier_ListLumesByLumoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLumesByLumoIDParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLumesByLumoIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_ListLumesByLumoID_Call) Return(lumes []sqlc.Lume, err error) *MockLumeQuerier_ListLumesByLumoID_Call {
	_c.Call.Return(lumes, err)
	return _c
}

func (_c *MockLumeQuerier_ListLumesByLumoID_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLumesByLumoIDParams) ([]sqlc.Lume, error)) *MockLumeQuerier_ListLumesByLumoID_Call {
	_c.Call.Return(run)
	return _c
}

// ListLumesByType provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) ListLumesByType(ctx context.Context, arg sqlc.ListLumesByTypeParams) ([]sqlc.Lume, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListLumesByType")
	}

	var r0 []sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLumesByTypeParams) ([]sqlc.Lume, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.ListLumesByTypeParams) []sqlc.Lume); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Lume)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.ListLumesByTypeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_ListLumesByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLumesByType'
type MockLumeQuerier_ListLumesByType_Call struct {
	*mock.Call
}

// ListLumesByType is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.ListLumesByTypeParams
func (_e *MockLumeQuerier_Expecter) ListLumesByType(ctx interface{}, arg interface{}) *MockLumeQuerier_ListLumesByType_Call {
	return &MockLumeQuerier_ListLumesByType_Call{Call: _e.mock.On("ListLumesByType", ctx, arg)}
}

func (_c *MockLumeQuerier_ListLumesByType_Call) Run(run func(ctx context.Context, arg sqlc.ListLumesByTypeParams)) *MockLumeQuerier_ListLumesByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.ListLumesByTypeParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.ListLumesByTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_ListLumesByType_Call) Return(lumes []sqlc.Lume, err error) *MockLumeQuerier_ListLumesByType_Call {
	_c.Call.Return(lumes, err)
	return _c
}

func (_c *MockLumeQuerier_ListLumesByType_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.ListLumesByTypeParams) ([]sqlc.Lume, error)) *MockLumeQuerier_ListLumesByType_Call {
	_c.Call.Return(run)
	return _c
}

// SearchLumesByLocation provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) SearchLumesByLocation(ctx context.Context, arg sqlc.SearchLumesByLocationParams) ([]sqlc.Lume, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchLumesByLocation")
	}

	var r0 []sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.SearchLumesByLocationParams) ([]sqlc.Lume, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.SearchLumesByLocationParams) []sqlc.Lume); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.Lume)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.SearchLumesByLocationParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_SearchLumesByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchLumesByLocation'
type MockLumeQuerier_SearchLumesByLocation_Call struct {
	*mock.Call
}

// SearchLumesByLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.SearchLumesByLocationParams
func (_e *MockLumeQuerier_Expecter) SearchLumesByLocation(ctx interface{}, arg interface{}) *MockLumeQuerier_SearchLumesByLocation_Call {
	return &MockLumeQuerier_SearchLumesByLocation_Call{Call: _e.mock.On("SearchLumesByLocation", ctx, arg)}
}

func (_c *MockLumeQuerier_SearchLumesByLocation_Call) Run(run func(ctx context.Context, arg sqlc.SearchLumesByLocationParams)) *MockLumeQuerier_SearchLumesByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.SearchLumesByLocationParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.SearchLumesByLocationParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_SearchLumesByLocation_Call) Return(lumes []sqlc.Lume, err error) *MockLumeQuerier_SearchLumesByLocation_Call {
	_c.Call.Return(lumes, err)
	return _c
}

func (_c *MockLumeQuerier_SearchLumesByLocation_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.SearchLumesByLocationParams) ([]sqlc.Lume, error)) *MockLumeQuerier_SearchLumesByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLume provides a mock function for the type MockLumeQuerier
func (_mock *MockLumeQuerier) UpdateLume(ctx context.Context, arg sqlc.UpdateLumeParams) (sqlc.Lume, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLume")
	}

	var r0 sqlc.Lume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateLumeParams) (sqlc.Lume, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateLumeParams) sqlc.Lume); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Lume)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.UpdateLumeParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLumeQuerier_UpdateLume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLume'
type MockLumeQuerier_UpdateLume_Call struct {
	*mock.Call
}

// UpdateLume is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.UpdateLumeParams
func (_e *MockLumeQuerier_Expecter) UpdateLume(ctx interface{}, arg interface{}) *MockLumeQuerier_UpdateLume_Call {
	return &MockLumeQuerier_UpdateLume_Call{Call: _e.mock.On("UpdateLume", ctx, arg)}
}

func (_c *MockLumeQuerier_UpdateLume_Call) Run(run func(ctx context.Context, arg sqlc.UpdateLumeParams)) *MockLumeQuerier_UpdateLume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.UpdateLumeParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.UpdateLumeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLumeQuerier_UpdateLume_Call) Return(lume sqlc.Lume, err error) *MockLumeQuerier_UpdateLume_Call {
	_c.Call.Return(lume, err)
	return _c
}

func (_c *MockLumeQuerier_UpdateLume_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.UpdateLumeParams) (sqlc.Lume, error)) *MockLumeQuerier_UpdateLume_Call {
	_c.Call.Return(run)
	return _c
}
